#!/usr/bin/env python3
"""
Author: Ioannis Paraskevakos
License: MIT
Copyright: 2018-2019
"""

import radical.utils as ru
from iceberg.iceberg_parser import IcebergParser
from iceberg.executor import Seals

if __name__ == "__main__":

    parsed_values = IcebergParser().args()
    import os

    if ['rmq_username'] in parsed_values:
        os.environ['RMQ_USENAME'] = parsed_values['rmq_username']
    elif 'RMQ_USENAME' not in os.environ:
        raise RuntimeError('RMQ_USENAME is not setup.')
    
    if ['rmq_password'] in parsed_values:
        os.environ['RMQ_PASSWORD'] = parsed_values['rmq_password']
    elif 'RMQ_PASSWORD' not in os.environ:
        raise RuntimeError('RMQ_PASSWORD is not setup.')

    if ['rmq_endpoint'] in parsed_values:
        os.environ['RMQ_ENDPOINT'] = parsed_values['rmq_endpoint']
    elif 'RMQ_ENDPOINT' not in os.environ:
        raise RuntimeError('RMQ_ENDPOINT is not setup.')
    
    if ['rmq_port'] in parsed_values:
        os.environ['RMQ_PORT'] = parsed_values['rmq_port']
    elif 'RMQ_PORT' not in os.environ:
        raise RuntimeError('RMQ_PORT is not setup.')
    
    if ['radical_pilot_dburl'] in parsed_values:
        os.environ['RADICAL_PILOT_DBURL'] = parsed_values['radical_pilot_dburl']
    elif 'RADICAL_PILOT_DBURL' not in os.environ:
        raise RuntimeError('RADICAL_PILOT_DBURL is not setup.')
    
    if parsed_values['analysis']['which'] == 'seals':
        if ['ve_seals'] in parsed_values:
            os.environ['VE_SEALS'] = parsed_values['ve_seal']
        elif 'VE_SEALS' not in os.environ:
            raise RuntimeError('VE_SEALS is not setup.')
        exec_obj = Seals(name=ru.generate_id('seals.%(counter)04d',
                         mode=ru.ID_CUSTOM, namespace='seals'),
                         resources={
                            'resource': parsed_values['general']['resource'],
                            'queue': parsed_values['general']['queue'],
                            'walltime': parsed_values['general']['waltime'],
                            'cpus': parsed_values['general']['cpus'],
                            'gpus': parsed_values['general']['gpus']
                            },
                         project=parsed_values['general']['project'],
                         input_path=parsed_values['general']['input_path'],
                         output_path=parsed_values['general']['output_path'],
                         scale_bands=parsed_values['analysis']['scale_bands'],
                         model=parsed_values['analysis']['model'],
                         model_path=parsed_values['analysis']['model_path'],
                         model_arch=parsed_values['analysis']['model_arch'],
                         hyperparameters=parsed_values['analysis']['hyperparameters'])
    else:
        raise RuntimeError('Analysis %s not supported yet' %
                           parsed_values['analysis']['which'])

    exec_obj.run()
